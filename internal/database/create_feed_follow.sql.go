// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_feed_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS (
  INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
  VALUES (gen_random_uuid(), now(), now(), $1, $2)
  RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
  i.id, i.created_at, i.updated_at, i.user_id,
  u.name AS user_name,
  i.feed_id, f.name AS feed_name, f.url AS feed_url
FROM inserted i
JOIN users u ON u.id = i.user_id
JOIN feeds f ON f.id = i.feed_id
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	UserName  string
	FeedID    uuid.UUID
	FeedName  string
	FeedUrl   string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.UserName,
		&i.FeedID,
		&i.FeedName,
		&i.FeedUrl,
	)
	return i, err
}
